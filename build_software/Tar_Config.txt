
""""""""""""""""""""""""""""""
In build_software/Tar_Config.txt

圧縮ファイルを展開する
gnuhelloディレクトリで圧縮ファイルを展開すると、
gnuhelloディレクトリ配下に新しいhello-1.12ディレクトリができる
そこに全てが入っている
ファイル名が大文字になっているものはほとんどドキュメント
=============================================================
tar zxvf hello-2.12.tar.gz
cd hello-1.12
ls -p
=============================================================
tarコマンドについて
(オプション)
z: gzip形式
x: アーカイブを展開
v: 処理したファイルを詳しく出力
f: アーカイブファイル名を指定

圧縮ファイルの展開後、ディレクトリに移動し、ビルドする
(基本ビルド方法)
===================
./configure
make
sudo make install
===================

[最低限確認すべきドキュメント]

README: ソフトウェアの紹介や作者の連絡先やインストール手順が書かれているファイル
ChangeLog/CHANGES: バージョンごとの変更点がまとめられているファイル
INSTALL: インストール手順をまとめたファイル
COPYING/LICENSE: ライセンス条項が記されているファイル
代表的なライセンスにGPLがある。これはFOSSから派生したソフトウェアを再配布する時GPLで配布しなければならないという制約がある。
派生したソフトウェアの販売は自由だが、入手した人が無料で配布するのもまた自由になってしまうためそのようなライセンスで公開されているFOSSを
ビジネスで使えないケースがある。

[Makefileの生成とconfigureファイル]

展開したhello-2.12ディレクトリにはまだMakefileが存在しない。
つまり、このままではmakeコマンドを実行できないということ。
Makefileを生成するためには、展開したhello-2.12に入っている、configureと呼ばれるシェルスクリプトを実行する必要がある。
configureは環境差異を吸収し環境に適しているMakefileを自動生成するシェルスクリプトである
configureのおかげでCentOSでもDebianでもFreeBSDでもそれぞれの環境にあったMakefileを手に入れられる。
configureファイルの実行
configureに関してオプションをつけたい場合は、--prefix=値などとしてコマンドと一緒に打つ
=======================================
./configure [option 1] [option2] ...
=======================================

configureの役割は2つ
1. 環境の違いを吸収して移植性高いMakefileを生成すること
2. ビルド時にユーザーが設定を変更できるようにすること
configureスクリプトで設定する主な項目は、
・インストールディレクトリ
・コンパイラやそのオプション
・機能や追加オプションのオン・オフ
・ソフトウェア実行時の設定デフォルト値

configure実行時に設定内容を指定する方法には、コマンドライン引数(オプション)と環境変数がある。

<インストールディレクトリを変更する>
--prefix=ディレクトリ名で指定する
======================================
./configure --prefix=/opt/hello-2.12
make
sudo make install
======================================

/opt/hello-2.12の確認と実行
==========================
ls -p /opt/hello-2.12
=> bin/ share/
ls -p /opt/hello-2.12/bin
=> hello

/opt/hello-2.12/bin/hello
=> Hello, World!
==========================

(注意)
======================================
./configure --prefix=/opt
make
sudo make install
======================================
としてしまうと、optディレクトリが上書きされてしまう。

ソフトウェアの設定を変更したい場合は、オプション指定または環境変数指定で設定を与えてビルドしなおす。
1度ビルドしたならば--prefixで同じ場所を指定して、その他のオプションをつけてビルドし直せば、上書きされる。
==================================================
./configure --prefix=/opt/hello_dir --disable-nls
make
sudo make install
==================================================

--helpオプションでソフトウェア固有の設定にどのようなものが存在しているのかわかる。
========================
./configure --help=short
========================

[依存関係にあるモジュールのインストール]
(実例)
apacheをビルドしようとしたら、aprとapr-utilが依存していて、存在しないため
apacheのビルド前に、aprとapr-utilをビルドした。
apr-utilのビルド中にexpat.hがないというエラーが出たため、apr-utilのためにexpatをビルド
apr, apr-util, expatをビルド後に、再度apacheをビルドし成功。
依存するソフトウェアのパスを--with-aprなどとオプション指定して、
configureスクリプトを実行することで解決する。
with引数のオプションは、外部ソフトウェアを組み込むか否かの指示と、
外部ソフトウェアが存在するディレクトリまでのパスを指示する2つの役割がある。
外部ソフトウェアが必須ならば前者の指定はいらない。また、外部ソフトウェアが/usrなどの
標準的な場所に入っている場合も指定はいらない。
yumコマンドなどでインストールした外部ソフトウェアは標準ディレクトリに自動で配置されるため、withでの指定はいらない。1から手動でビルドして別の場所においた場合はwithで指定する。


[ビルドまとめ]
webサイトからwgetで圧縮ファイルをダウンロードする
gpgで電子署名を確認し、圧縮ファイルが本物であることを確認する
bunzip2/tarで圧縮ファイルを展開し、ディレクトリに移動
./configureでスクリプトファイルconfigureを実行する
もし依存関係が解決されずにエラーがでたら
依存しているソフトウェアをビルドする
make
sudo make install
完了








